# Generated by Django 5.2.3 on 2025-08-26 08:18

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='The title of the question.', max_length=255)),
                ('description', models.TextField(help_text='The detailed problem description in HTML format.')),
                ('difficulty', models.CharField(choices=[('Basic', 'Basic'), ('Novice', 'Novice'), ('Intermediate', 'Intermediate'), ('Advanced', 'Advanced'), ('Expert', 'Expert')], help_text='The difficulty level of the question.', max_length=20)),
                ('depth_of_knowledge', models.CharField(choices=[('Recall & Reproduction', 'Recall & Reproduction'), ('Skill & Concept', 'Skill & Concept'), ('Strategic Thinking', 'Strategic Thinking'), ('Extended Thinking', 'Extended Thinking')], help_text='The Depth of Knowledge (DOK) level.', max_length=50)),
                ('points', models.PositiveIntegerField(default=1, help_text='Points awarded for a correct answer.')),
                ('time_to_answer', models.CharField(help_text='The time allowed to answer in HH:MM:SS format.', max_length=8)),
                ('domain', models.CharField(choices=[('Tech', 'Tech'), ('Non-Tech', 'Non-Tech')], default='Tech', help_text='The domain of the question (e.g., Tech, Non-Tech).', max_length=10)),
                ('tags', models.CharField(blank=True, help_text='Comma-separated tags for the question.', max_length=255, null=True)),
                ('hint', models.TextField(blank=True, help_text='An optional hint for the question.', null=True)),
                ('instructions', models.TextField(blank=True, help_text='Specific instructions for the candidate.', null=True)),
                ('available_in_interview', models.BooleanField(default=False, help_text='Is this question available in the interview area?')),
                ('enable_watermark', models.BooleanField(default=True, help_text='Should a watermark be enabled for this question?')),
                ('deliver_fullscreen', models.BooleanField(default=False, help_text='Should the question be delivered in full screen?')),
                ('selected_topics', models.TextField(blank=True, help_text='JSON-encoded list of selected topics.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('allowed_languages', models.TextField(blank=True, help_text='JSON-encoded list of allowed languages.', null=True)),
                ('code_stubs', models.TextField(blank=True, help_text='JSON-encoded dictionary of code stubs for each language.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TestCase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, help_text='A brief description of the test case.', max_length=255, null=True)),
                ('input_data', models.TextField(help_text='The input data for the test case.')),
                ('output_data', models.TextField(help_text='The expected output for the test case.')),
                ('categories', models.CharField(blank=True, choices=[('Basic cases', 'Basic Cases'), ('Boundary cases', 'Boundary Cases'), ('Dependent cases', 'Dependent Cases'), ('Functional cases', 'Functional Cases')], help_text='The category of the test case.', max_length=50, null=True)),
                ('weightage', models.FloatField(blank=True, help_text='The weightage or score for this test case.', null=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_cases', to='assessment.question')),
            ],
        ),
    ]
